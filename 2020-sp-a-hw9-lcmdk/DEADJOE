
*** Modified files in JOE when it aborted on Sun Apr 19 17:21:56 2020
*** JOE was aborted by signal 1

*** Modified files in JOE when it aborted on Sun Apr 19 17:57:34 2020
*** JOE was aborted by signal 1

*** File 'simFuncts.cpp'
//Programmer: Logan Choi
//MST Username: lcmdk
//Section: Price 101
//File: simFuncts.cpp
//Purpose: This does the actual simulation that is called from main.


#include "simulation.h"


void simulation(const int size,int num_drinks,
           const int traps, const int wind, info& results)
{
   school s(size);
   janitor j;
   lunch l;
   drink arr[MAX_DRINKS];
   bool find_lunch = false;
   bool window_exit = false;

   j.place_me(s);
   l.place_me(s);
   
   do
   {
     j.rand_walk(s);
     l.rand_move(s);

   }while(j.get_alive() && !find_lunch && !window_exit);

   return;
}

*** Modified files in JOE when it aborted on Sun Apr 19 17:57:36 2020
*** JOE was aborted by signal 1

*** Modified files in JOE when it aborted on Sun Apr 19 21:22:15 2020
*** JOE was aborted by signal 1

*** File 'janitor.cpp'
//Programmer: Logan Choi
//MST Username: lcmdk
//Section: Price 101
//File: janitor.cpp
//Purpose: This file contains the member functions of the janitor class.

#include "janitor.h"


void janitor::place_me(school & grid)
{
   //Variables
   int size;

   //It will get school size and change the
   //janitor's coordinates, and place him on grid.
   
   size = grid.get_dim();
   m_row = size/2;
   m_col = m_row;
   grid.set_sym(m_row,m_col,m_symbol);
   return;
}

void janitor::rand_walk(school & grid, info& results)
{
   srand(time(NULL));
  
   grid.set_sym(m_row,m_col,EMPTY);

   if (m_bac >= 0.25)
      m_alive = false;
   else if (m_bac >= 0.08)
      m_sober = false;
     
   //In this do-while loop, I will pick an adjacent square in if-else
   //but if the spot is already occupied, it will keep looping. It
   //also changes the janitor's coordinates
   temp_row = m_row;
   temp_col = m_col;
   if (m_sober == false)
   {
     do
     {
       m_row = temp_row;
       m_col = temp_col;
       dir = rand() % NEWS;
       if (dir == NORTH)
         m_row++;
       else if (dir == SOUTH)
         m_row--;
       else if (dir == EAST)
         m_col++;
       else if (dir == WEST)
         m_col--;

       if (grid.get_sym == WINDOW)
         results.total_windows ++;
       else if (grid.get_sym == WALL1 || grid.get_sym == WALL2)
         results.total_bruises ++;
       else if (grid.get_sym == 'D')
         m_bac = m_bac 
     }while (!grid.valid(m_row,m_col));   
   }
  //Set the new position of the janitor on grid
  grid.set_sym(m_row,m_col,m_symbol);

  return;
}

void janitor::print() const
{
  //Print out the janitor's info.
  cout << "\nJanitor's Name: " << m_name << endl
       << "# of Bruises: " << m_bruises << endl
       << "Symbol: " << m_symbol << endl
       << "Alive? " << (m_alive ? "Yes" : "No") << endl
       << "Sober? " << (m_sober ? "Yes" : "No") << endl
       << "Blood-Alcohol Content: " << m_bac << endl
       << "Position: " << m_row << "," <<m_col << endl;
  return;
}

*** Modified files in JOE when it aborted on Sun Apr 19 21:46:09 2020
*** JOE was aborted by signal 1

*** File 'janitor.h'
//Programmer: Logan Choi
//MST Username: lcmdk
//Section: Price 101
//File: janitor.h
//Purpose: This file contains the janitor class in which driver will text.


#ifndef JANITOR_H
#define JANITOR_H
#include "school.h"
#include <iostream>
#include <cstdlib>
using namespace std;

//Global Constants
const int NEWS = 4; //Number of directions a person can move
const char EMPTY = ' ';
const int NORTH = 0;
const int SOUTH = 1;
const int EAST = 2;
const int WEST = 3;
//The janitor() can take a name as a parameter, and will set up the rest of 
//the member variables to their default.
//Pre: none
//Post: The janitor's members are set up and stored.

//The place_me() will place the janitor in the middle of the school grid.
//Pre: The school grid is cleared and built.
//Post: The school grid now has the janitor in the middle of the grid.
//His position is also updated.

//The get_sober() will just return the janitor's m_sober variable.
//Pre: None
//Post:The janitor's m_sober variable is returned.

//The get_alive() will just return the janitor's m_alive variable.
//Pre; None
//Post: The janitor's m_alive variable is returned.

//The rand_walk() will make the janitor move in a certain direction on grid.
//It will also store his new coordinates.
//Pre:The school grid is cleared and built.
//Post: The school grid has cleared the janitor's previous position, and 
//moved him. It also updates his new position. 

//The print() will just print out all the janitor's members.
//Pre: None
//Post: The janitor's info is printed out.

class janitor
{
   public:
     janitor(string name = "Willie"):m_name(name),m_symbol('J'),m_bac(0.05),
       m_bruises(0),m_alive(true),m_lunch(false),m_sober(true),m_row(-1),m_col(-1){}
     void place_me(school & grid);
     void rand_walk(school & grid);
     bool get_sober(){return m_sober;}
     bool get_alive(){return m_alive;}
     void print() const;
     
   private:
     string m_name;
     char m_symbol;
     float m_bac;
     int m_bruises; 
     bool m_alive;
     bool m_lunch;
     bool m_sober;
     int m_row;
     int m_col;
};

#endif
